AWSTemplateFormatVersion: "2010-09-09"
Description: ''
Resources:
  LambdaFunctionCreate:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "import json\nimport boto3\nimport uuid as myuuid\n\ndynamodb = boto3.resource('dynamodb')\n\
          table = dynamodb.Table('todo-table')\n\ndef put_user_data(uuid,title, task):\n\
          \n    response = table.put_item( Item = { 'id': uuid, 'title': title, 'task':\
          \ task })\n    return response\n\ndef lambda_handler(event, context):  \
          \  \n    uuid=str(myuuid.uuid4())\n    title=event['title']\n    task=event['task']\n\
          \    dynamo_resp = put_user_data(uuid,title,task)\n    return {\n      \
          \    'statusCode': 200,\n          'body': json.dumps(dynamo_resp)}\n"
      FunctionName: CREATE-TODO
      Handler: index.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
        - IAMRole
        - Arn
    DependsOn:
    - DynamoDBTable
  LambdaFunctionRead:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: "import json\nimport boto3\ndynamodb = boto3.resource('dynamodb')\n\
          table = dynamodb.Table('todo-table')\n\ndef get_data(uuid):\n\n\n    response\
          \ = table.get_item(Key={'id': uuid})\n    return response\n\ndef lambda_handler(event,\
          \ context):\n\n    uuid = event.get('uuid', None)\n\n    if uuid != None:\n\
          \n      uuid=event['uuid']\n      data = get_data(uuid)\n\n    if uuid ==\
          \ None:\n\n      response = table.scan()\n      data = response['Items']\n\
          \      while 'LastEvaluatedKey' in response:\n          response = table.scan(ExclusiveStartKey=response['LastEvaluatedKey'])\n\
          \          data.extend(response['Items'])\n\n    return {\n      'statusCode':\
          \ 200,\n      'body': json.dumps(data)\n        }\n"
      FunctionName: READ-TODO
      Handler: index.lambda_handler
      Runtime: python3.9
      Role:
        Fn::GetAtt:
        - IAMRole
        - Arn
    DependsOn:
    - DynamoDBTable
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: todo-table
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    DependsOn:
    - IAMRole
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Policy_api-lambda-db
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:TagResource
            - dynamodb:UntagResource
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:UpdateItem
            Resource: arn:aws:dynamodb:*:*:table/todo-table
          - Effect: Allow
            Action:
            - logs:CreateLogStream
            - logs:CreateLogGroup
            - logs:PutLogEvents
            Resource: '*'
